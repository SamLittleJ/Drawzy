# Bloc server Nginx
# • Rol: Configurare principală pentru serverul web care servește datele frontend.
server {
    # Port ascultare HTTP
    # • Rol: Ascultă cererile HTTP pe portul 80.
    listen 80;

    # Nume server
    # • Rol: Afișează o potrivire globală (catch-all) pentru toate domeniile.
    server_name _;

    # Document Root
    # • Rol: Directorul din care sunt servite fișierele statice (build React).
    root /usr/share/nginx/html;

    # Fișier implicit
    # • Rol: Fișierul HTML de intrare pentru aplicația SPA.
    index index.html;

    # Ruta principală (SPA fallback)
    # • Rol: Trimite toate cererile care nu corespund unui fișier static către index.html pentru routing-ul client-side.
    location / {
        # Fallback routing
        # • Rol: Încearcă resursele statice și, dacă nu există, afișează index.html.
        try_files $uri $uri/ /index.html;
    }

    # Proxy WebSocket
    # • Rol: Redirecționează conexiunile WebSocket către backend-ul aplicației.
    location /ws/ {
        # Destinație proxy
        # • Rol: URL-ul Load Balancer-ului backend pentru WS.
        proxy_pass http://drawzy-backend-alb-409373296.eu-central-1.elb.amazonaws.com;

        # Versiune HTTP pentru proxy
        # • Rol: Folosește HTTP/1.1, necesar pentru upgrade la WebSocket.
        proxy_http_version 1.1;

        # Header Upgrade
        # • Rol: Permite upgrade-ul conexiunii la protocolul WebSocket.
        proxy_set_header Upgrade $http_upgrade;

        # Header Connection
        # • Rol: Specifică că dorim o conexiune persistentă și upgrade la WebSocket.
        proxy_set_header Connection "upgrade";

        # Header Host
        # • Rol: Trimite host-ul original către serverul backend.
        proxy_set_header Host $host;

        # Bypass cache
        # • Rol: Evită caching-ul pentru conexiunile care cer upgrade (WebSocket).
        proxy_cache_bypass $http_upgrade;
    }
}