/* Stil de bază pentru înălțime completă
 * • Rol: Asigură că elementele html și body umplu ecranul complet.
 * • Motiv: Permite animațiilor pe fundal să acopere întreaga zonă vizibilă.
 * • Alternative: Setarea înălțimii doar pe body (puțină consistență în unele browsere).
 */
 html, body {
  height: 100%;
}

/* Variabile temă Retro Pixel Art
 * • Rol: Definește culorile principale (fundal, text, accente) ale aplicației.
 * • Motiv: Centralizează palette-ul de culori pentru ușurință în întreținere.
 * • Alternative: Hardcodarea culorilor direct în reguli CSS (mai puțin flexibil).
 */
:root {
  --bg: #336699;
  --fg: #e0e0e0;
  --accent1: #ffd700;
  --accent2: #ff5555;
  --accent3: #55ff55;
  --accent4: #5555ff;
  --border: #00ffff;
}

/* Reset simplu global
 * • Rol: Elimină marginile și padding-urile implicite și setează box-sizing.
 * • Motiv: Normalizează comportamentul elementelor între browsere.
 * • Alternative: Utilizarea unui reset CSS complet sau Normalize.css.
 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Stil global pentru body
 * • Rol: Setează fontul principal și background-ul temei.
 * • Motiv: Aplică tema retro pixel art pe întreaga aplicație.
 * • Alternative: Schimbare dinamică a temei prin clase CSS sau JS.
 */
body {
  font-family: 'VT323', monospace;
  background-color: var(--bg);
  color: var(--fg);
  line-height: 1.6;
}

/* Container principal
 * • Rol: Creează un container flex vertical care ocupă toată înălțimea.
 * • Motiv: Permite alinierea conținutului pe întreaga pagină.
 * • Alternative: Utilizarea grid în loc de flexbox.
 */
#root, .App {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

/* Container intern centrat
 * • Rol: Limitează lățimea conținutului și adaugă padding.
 * • Motiv: Crează margini laterale egale și spațiu intern consistent.
 * • Alternative: Container fluid fără max-width.
 */
.container {
  flex: 1;
  max-width: 960px;
  margin: 0 auto;
  padding: 1rem;
}

/* Stil link-uri
 * • Rol: Definește culoarea și comportamentul la hover pentru link-uri.
 * • Motiv: Asigură consistența interactivității elementelor <a>.
 */
a {
  color: #0066cc;
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}

/* Stil butoane și text pixel
 * • Rol: Aplică fontul monospace și tema pixel art la butoane și elemente text spéciale.
 * • Motiv: Păstrează un stil unificat retro în întreg UI-ul.
 * • Alternative: Utilizarea altor fonturi pixel (ex. Press Start 2P).
 */
h1, h2, button, .pixel-text {
  font-family: 'Press Start 2P', cursive;
}

/* Stil implicit butoane retro
 * • Rol: Definește culorile, padding-ul și efectele hover/active pentru butoane.
 * • Motiv: Asigură consistență în toate butoanele aplicației.
 */
button {
  background: var(--accent1);
  color: var(--bg);
  border: none;
  padding: 0.5rem 1rem;
  font-size: 0.9rem;
  transition: background 0.1s, transform 0.1s;
}
button:hover {
  background: var(--accent2);
}
button:active {
  transform: translate(1px, 1px);
}

/* Stilizare scrollbar
 * • Rol: Personalizează lățimea și culoarea thumb-ului scroll-ului.
 * • Motiv: Se potrivește cu paleta de accente a aplicației.
 * • Alternative: Stiluri implicite de browser.
 */
::-webkit-scrollbar {
  width: 8px;
}
::-webkit-scrollbar-thumb {
  background: var(--accent3);
}

/* Particule animate pe fundal
 * • Rol: Container și elemente pentru animațiile decorative.
 * • Motiv: Îmbogățește vizual experiența utilizatorului.
 * • Alternative: Canvas sau WebGL pentru animații complexe.
 */
.particles {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  overflow: hidden;
  z-index: -1;
}
.particle {
  position: absolute;
  background-size: auto;
  background-repeat: no-repeat;
  opacity: 0;
  animation-fill-mode: both;
}

/* Particulă brush/eraser/palette/pencil/bucket/marker
 * • Rol: Stilizează fiecare iconiță animată (dimensiune, culoare, animație).
 * • Motiv: Diversifică elementele animate și evidențiază diferitele unelte.
 */
.particle.brush {
  width: 16px;
  height: 16px;
  background-color: var(--accent1);
  border-radius: 50%;
  animation: float1 15s linear infinite;
  animation-delay: 0s;
}
.particle.eraser {
  width: 14px;
  height: 14px;
  background-color: var(--accent2);
  animation: float2 18s linear infinite;
  animation-delay: 5s;
}
.particle.palette {
  width: 0;
  height: 0;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-bottom: 16px solid var(--accent3);
  animation: float3 12s linear infinite;
  animation-delay: 10s;
}
.particle.pencil {
  width: 4px;
  height: 20px;
  background-color: var(--border);
  border-radius: 2px;
  animation: flyUp 12s linear infinite;
  animation-delay: 2s;
}
.particle.bucket {
  width: 12px;
  height: 12px;
  background-color: #99ccff; /* lighter blue for better visibility */
  border-radius: 50% 50% 0 0;
  animation: flyNW 20s linear infinite;
  animation-delay: 4s;
}
.particle.marker {
  width: 6px;
  height: 14px;
  background-color: var(--accent3);
  clip-path: polygon(0 0, 100% 0, 80% 100%, 20% 100%);
  animation: flyNE 18s linear infinite;
  animation-delay: 6s;
}

/* Keyframes animații variate
 * • Rol: Definește traiectoria și comportamentul animațiilor particulelor.
 * • Motiv: Creează mișcare diversificată (direcții multiple, rotații).
 * • Alternative: JavaScript pentru animație programatică.
 */
@keyframes float1 {
  0%   { transform: translate(-10%, 20vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(110vw, 80vh) rotate(360deg); opacity: 0; }
}
@keyframes float2 {
  0%   { transform: translate(110vw, 40vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(-10%, 60vh) rotate(-360deg); opacity: 0; }
}
@keyframes float3 {
  0%   { transform: translate(-20%, 80vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(120vw, 30vh) rotate(360deg); opacity: 0; }
}
@keyframes flyNE {
  0%   { transform: translate(-20%, 100vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(120vw, -20vh) rotate(360deg); opacity: 0; }
}
@keyframes flyNW {
  0%   { transform: translate(120vw, 100vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(-20%, -20vh) rotate(-360deg); opacity: 0; }
}
@keyframes flyUp {
  0%   { transform: translate(0, 110vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(0, -20vh) rotate(360deg); opacity: 0; }
}
@keyframes flyDown {
  0%   { transform: translate(0, -20vh) rotate(0deg); opacity: 0; }
  10%  { opacity: 1; }
  100% { transform: translate(0, 110vh) rotate(-360deg); opacity: 0; }
}